#! /usr/bin/env nix-shell
#! nix-shell -i python3 -p python3Packages.requests python3Packages.matplotlib python3Packages.cartopy
# vim:filetype=python

import sys, json
import requests as req
from argparse import ArgumentParser

import cartopy
import cartopy.crs as ccrs
import cartopy.feature as cf
import matplotlib.pyplot as plt

class InvalidIP(Exception):
    pass

def stat(string):
    print(string + 10 * " " + "\r", end="")

def lookup(ip):
    # Sends json back in the following shape
    # {
    #   "ip": "103.110.20.206",
    #   "city": "Delhi",
    #   "region": "Delhi",
    #   "country": "IN",
    #   "loc": "28.6519,77.2315",
    #   "org": "AS133275 Gigantic Infotel Pvt Ltd",
    #   "postal": "110001",
    #   "timezone": "Asia/Kolkata"
    # }
    stat("Asking ipinfo.io for {} ...".format(ip)) 
    resp = req.get("http://ipinfo.io/{}?token={}".format(ip, args.token))
    if resp.status_code != 200:
        print("'{}' is not a valid ip".format(ip), file=sys.stderr)
        sys.exit(0)
    return json.loads(resp.text)

# Visualize the data with cartopy
# Create a point for the passed in coordinates
def plot(xy, name):
    # Transform xy ( "x,y" to (x, y) )
    splitted = xy.split(",")
    new = (float(splitted[0]), float(splitted[1]))
    ax.annotate(name, xy=new, xycoords=transform,
        ha="right", va="top", color="blue")

parser = ArgumentParser()
# Multiple IPs can be specified by seperating them with a \n (newline)
parser.add_argument("--addr", type=str, help="the ip addresses to look up", default=sys.stdin)
parser.add_argument("-t", "--token", type=str, help="the token to use with ipinfo.io", required=True)
args = parser.parse_args()

# Set up the map
stat("Mapping ...")
ax = plt.axes(projection=ccrs.Mercator())
transform = ccrs.PlateCarree()._as_mpl_transform(ax)
ax.add_feature(cf.COASTLINE)
ax.set_title("Worl map")

ips = args.addr.read().split("\n") if args.addr == sys.stdin else args.addr.split("\n")

stat("Plotting ...")
for ip in ips:
    plot(lookup(ip)["loc"], "‚óè")

stat("Saving map ...")
plt.savefig("map.png")
